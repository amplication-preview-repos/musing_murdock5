/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HistoryService } from "../history.service";
import { HistoryCreateInput } from "./HistoryCreateInput";
import { History } from "./History";
import { HistoryFindManyArgs } from "./HistoryFindManyArgs";
import { HistoryWhereUniqueInput } from "./HistoryWhereUniqueInput";
import { HistoryUpdateInput } from "./HistoryUpdateInput";

export class HistoryControllerBase {
  constructor(protected readonly service: HistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: History })
  async createHistory(
    @common.Body() data: HistoryCreateInput
  ): Promise<History> {
    return await this.service.createHistory({
      data: {
        ...data,

        redEnvelopeCover: data.redEnvelopeCover
          ? {
              connect: data.redEnvelopeCover,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        redEnvelopeCover: {
          select: {
            id: true,
          },
        },

        status: true,
        timeStamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [History] })
  @ApiNestedQuery(HistoryFindManyArgs)
  async histories(@common.Req() request: Request): Promise<History[]> {
    const args = plainToClass(HistoryFindManyArgs, request.query);
    return this.service.histories({
      ...args,
      select: {
        createdAt: true,
        id: true,

        redEnvelopeCover: {
          select: {
            id: true,
          },
        },

        status: true,
        timeStamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: History })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async history(
    @common.Param() params: HistoryWhereUniqueInput
  ): Promise<History | null> {
    const result = await this.service.history({
      where: params,
      select: {
        createdAt: true,
        id: true,

        redEnvelopeCover: {
          select: {
            id: true,
          },
        },

        status: true,
        timeStamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: History })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHistory(
    @common.Param() params: HistoryWhereUniqueInput,
    @common.Body() data: HistoryUpdateInput
  ): Promise<History | null> {
    try {
      return await this.service.updateHistory({
        where: params,
        data: {
          ...data,

          redEnvelopeCover: data.redEnvelopeCover
            ? {
                connect: data.redEnvelopeCover,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          redEnvelopeCover: {
            select: {
              id: true,
            },
          },

          status: true,
          timeStamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: History })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHistory(
    @common.Param() params: HistoryWhereUniqueInput
  ): Promise<History | null> {
    try {
      return await this.service.deleteHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,

          redEnvelopeCover: {
            select: {
              id: true,
            },
          },

          status: true,
          timeStamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
