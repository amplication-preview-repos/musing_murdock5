/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { History } from "./History";
import { HistoryCountArgs } from "./HistoryCountArgs";
import { HistoryFindManyArgs } from "./HistoryFindManyArgs";
import { HistoryFindUniqueArgs } from "./HistoryFindUniqueArgs";
import { CreateHistoryArgs } from "./CreateHistoryArgs";
import { UpdateHistoryArgs } from "./UpdateHistoryArgs";
import { DeleteHistoryArgs } from "./DeleteHistoryArgs";
import { RedEnvelopeCover } from "../../redEnvelopeCover/base/RedEnvelopeCover";
import { User } from "../../user/base/User";
import { HistoryService } from "../history.service";
@graphql.Resolver(() => History)
export class HistoryResolverBase {
  constructor(protected readonly service: HistoryService) {}

  async _historiesMeta(
    @graphql.Args() args: HistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [History])
  async histories(
    @graphql.Args() args: HistoryFindManyArgs
  ): Promise<History[]> {
    return this.service.histories(args);
  }

  @graphql.Query(() => History, { nullable: true })
  async history(
    @graphql.Args() args: HistoryFindUniqueArgs
  ): Promise<History | null> {
    const result = await this.service.history(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => History)
  async createHistory(
    @graphql.Args() args: CreateHistoryArgs
  ): Promise<History> {
    return await this.service.createHistory({
      ...args,
      data: {
        ...args.data,

        redEnvelopeCover: args.data.redEnvelopeCover
          ? {
              connect: args.data.redEnvelopeCover,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => History)
  async updateHistory(
    @graphql.Args() args: UpdateHistoryArgs
  ): Promise<History | null> {
    try {
      return await this.service.updateHistory({
        ...args,
        data: {
          ...args.data,

          redEnvelopeCover: args.data.redEnvelopeCover
            ? {
                connect: args.data.redEnvelopeCover,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => History)
  async deleteHistory(
    @graphql.Args() args: DeleteHistoryArgs
  ): Promise<History | null> {
    try {
      return await this.service.deleteHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RedEnvelopeCover, {
    nullable: true,
    name: "redEnvelopeCover",
  })
  async getRedEnvelopeCover(
    @graphql.Parent() parent: History
  ): Promise<RedEnvelopeCover | null> {
    const result = await this.service.getRedEnvelopeCover(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: History): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
