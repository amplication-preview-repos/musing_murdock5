/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RedEnvelopeCover as PrismaRedEnvelopeCover,
  History as PrismaHistory,
} from "@prisma/client";

export class RedEnvelopeCoverServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RedEnvelopeCoverCountArgs, "select">
  ): Promise<number> {
    return this.prisma.redEnvelopeCover.count(args);
  }

  async redEnvelopeCovers(
    args: Prisma.RedEnvelopeCoverFindManyArgs
  ): Promise<PrismaRedEnvelopeCover[]> {
    return this.prisma.redEnvelopeCover.findMany(args);
  }
  async redEnvelopeCover(
    args: Prisma.RedEnvelopeCoverFindUniqueArgs
  ): Promise<PrismaRedEnvelopeCover | null> {
    return this.prisma.redEnvelopeCover.findUnique(args);
  }
  async createRedEnvelopeCover(
    args: Prisma.RedEnvelopeCoverCreateArgs
  ): Promise<PrismaRedEnvelopeCover> {
    return this.prisma.redEnvelopeCover.create(args);
  }
  async updateRedEnvelopeCover(
    args: Prisma.RedEnvelopeCoverUpdateArgs
  ): Promise<PrismaRedEnvelopeCover> {
    return this.prisma.redEnvelopeCover.update(args);
  }
  async deleteRedEnvelopeCover(
    args: Prisma.RedEnvelopeCoverDeleteArgs
  ): Promise<PrismaRedEnvelopeCover> {
    return this.prisma.redEnvelopeCover.delete(args);
  }

  async findHistories(
    parentId: string,
    args: Prisma.HistoryFindManyArgs
  ): Promise<PrismaHistory[]> {
    return this.prisma.redEnvelopeCover
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .histories(args);
  }
  async GenerateRedEnvelopeCover(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
