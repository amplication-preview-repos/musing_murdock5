/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RedEnvelopeCover } from "./RedEnvelopeCover";
import { RedEnvelopeCoverCountArgs } from "./RedEnvelopeCoverCountArgs";
import { RedEnvelopeCoverFindManyArgs } from "./RedEnvelopeCoverFindManyArgs";
import { RedEnvelopeCoverFindUniqueArgs } from "./RedEnvelopeCoverFindUniqueArgs";
import { CreateRedEnvelopeCoverArgs } from "./CreateRedEnvelopeCoverArgs";
import { UpdateRedEnvelopeCoverArgs } from "./UpdateRedEnvelopeCoverArgs";
import { DeleteRedEnvelopeCoverArgs } from "./DeleteRedEnvelopeCoverArgs";
import { HistoryFindManyArgs } from "../../history/base/HistoryFindManyArgs";
import { History } from "../../history/base/History";
import { RedEnvelopeCoverService } from "../redEnvelopeCover.service";
@graphql.Resolver(() => RedEnvelopeCover)
export class RedEnvelopeCoverResolverBase {
  constructor(protected readonly service: RedEnvelopeCoverService) {}

  async _redEnvelopeCoversMeta(
    @graphql.Args() args: RedEnvelopeCoverCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RedEnvelopeCover])
  async redEnvelopeCovers(
    @graphql.Args() args: RedEnvelopeCoverFindManyArgs
  ): Promise<RedEnvelopeCover[]> {
    return this.service.redEnvelopeCovers(args);
  }

  @graphql.Query(() => RedEnvelopeCover, { nullable: true })
  async redEnvelopeCover(
    @graphql.Args() args: RedEnvelopeCoverFindUniqueArgs
  ): Promise<RedEnvelopeCover | null> {
    const result = await this.service.redEnvelopeCover(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RedEnvelopeCover)
  async createRedEnvelopeCover(
    @graphql.Args() args: CreateRedEnvelopeCoverArgs
  ): Promise<RedEnvelopeCover> {
    return await this.service.createRedEnvelopeCover({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RedEnvelopeCover)
  async updateRedEnvelopeCover(
    @graphql.Args() args: UpdateRedEnvelopeCoverArgs
  ): Promise<RedEnvelopeCover | null> {
    try {
      return await this.service.updateRedEnvelopeCover({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RedEnvelopeCover)
  async deleteRedEnvelopeCover(
    @graphql.Args() args: DeleteRedEnvelopeCoverArgs
  ): Promise<RedEnvelopeCover | null> {
    try {
      return await this.service.deleteRedEnvelopeCover(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [History], { name: "histories" })
  async findHistories(
    @graphql.Parent() parent: RedEnvelopeCover,
    @graphql.Args() args: HistoryFindManyArgs
  ): Promise<History[]> {
    const results = await this.service.findHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Mutation(() => String)
  async GenerateRedEnvelopeCover(
    @graphql.Args("args")
    args: string
  ): Promise<string> {
    return this.service.GenerateRedEnvelopeCover(args);
  }
}
